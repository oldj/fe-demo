/**
 * add_brackets.spec.js
 */

'use strict'

const {test} = require('ava')
const convert = require('./convert')

test('rule-visualization: convert test 1', t => {
  let a = ['&', '_0', '_1', 'r0']
  let r_dict = {'r0': ['|', '_2', '_3']}
  let d_dict = {'_0': '1', '_1': '2', '_2': '3', '_3': '4'}

  t.is(convert.toStr(a, r_dict, d_dict).replace(/\s+/g, ''), '1&2&(3|4)')
})

test('rule-visualization: convert test 2', t => {
  let a = ['&', '_0', '_1', 'r0', 'r4']
  let r_dict = {
    'r0': ['|', '_2', '_3'],
    'r1': ['&', '_10', '_11'],
    'r2': ['|', '_8', '_9', 'r1'],
    'r3': ['&', '_6', '_7', 'r2', '_12'],
    'r4': ['|', '_4', '_5', 'r3']
  }
  let d_dict = {
    '_0': '1',
    '_1': '2',
    '_2': '3',
    '_3': '4',
    '_4': '5',
    '_5': '6',
    '_6': '7',
    '_7': '8',
    '_8': '9',
    '_9': '10',
    '_10': '11',
    '_11': '12',
    '_12': '13'
  }

  let s = convert.toStr(a, r_dict, d_dict).replace(/\s+/g, '')
  t.is(s, '1&2&(3|4)&(5|6|(7&8&(9|10|(11&12))&13))')
})

test('rule-visualization: convert test with NOT', t => {
  let a = ['&', '_0', '_1', 'r0', 'r4']
  let r_dict = {
    'r0': ['|', '_2', '_3'],
    'r1': ['&', '_10', '_11'],
    'r2': ['|', '_8', '_9', 'r1'],
    'r3': ['&', '_6', '_7', '!r2', '!_12'],
    'r4': ['|', '_4', '!_5', 'r3']
  }
  let d_dict = {
    '_0': '1',
    '_1': '2',
    '_2': '3',
    '_3': '4',
    '_4': '5',
    '_5': '6',
    '_6': '7',
    '_7': '8',
    '_8': '9',
    '_9': '10',
    '_10': '11',
    '_11': '12',
    '_12': '13'
  }

  t.is(convert.toStr(a, r_dict, d_dict).replace(/\s+/g, ''), '1&2&(3|4)&(5|!6|(7&8&!(9|10|(11&12))&!13))')
})

test('rule-visualization: convert test 4', t => {
  let a = ['&', 'r14', '_16', 'r8', 'r18']
  let r_dict = {
    'r0': ['&', '_0', '_1'],
    'r1': ['&', '_2', '_3'],
    'r2': ['&', '_4', '!_5'],
    'r3': ['&', '_6', '_7'],
    'r4': ['&', '_8', '_9'],
    'r5': ['&', '_10', '_11'],
    'r6': ['&', '_12', '_13'],
    'r7': ['&', '_14', '_15'],
    'r8': ['|', '_17', '_18'],
    'r9': ['&', '_20', '_21', '_22'],
    'r10': ['&', '_23', '_24', '_25'],
    'r11': ['|', '_26', '_27'],
    'r12': ['&', '_33', '!_34', '_35'],
    'r13': ['|', '_39', '_40'],
    'r14': ['|', 'r0', 'r1', 'r2', 'r3', 'r4', 'r5', '!r6', 'r7'],
    'r15': ['|', '_31', '_32', 'r12'],
    'r16': ['&', '_38', '!r13'],
    'r17': ['&', '_29', '_30', 'r15'],
    'r18': ['|', '_19', 'r9', '!r10', 'r11', '_28', 'r17', '_36', '_37', 'r16', '_41']
  }
  let d_dict = {
    '_0': '15',
    '_1': '7',
    '_2': '21',
    '_3': '22',
    '_4': '23',
    '_5': '24',
    '_6': '25',
    '_7': '26',
    '_8': '27',
    '_9': '28',
    '_10': '29',
    '_11': '30',
    '_12': '31',
    '_13': '32',
    '_14': '33',
    '_15': '34',
    '_16': '10',
    '_17': '2',
    '_18': '11',
    '_19': '5',
    '_20': '2',
    '_21': '19',
    '_22': '16',
    '_23': '11',
    '_24': '20',
    '_25': '16',
    '_26': '35',
    '_27': '36',
    '_28': '3',
    '_29': '12',
    '_30': '121',
    '_31': '122',
    '_32': '123',
    '_33': '124',
    '_34': '125',
    '_35': '126',
    '_36': '4',
    '_37': '6',
    '_38': '17',
    '_39': '171',
    '_40': '172',
    '_41': '18'
  }

  t.is(convert.toStr(a, r_dict, d_dict).replace(/\s+/g, ''), '((15&7)|(21&22)|(23&!24)|(25&26)|(27&28)|(29&30)|!(31&32)|(33&34))&10&(2|11)&(5|(2&19&16)|!(11&20&16)|35|36|3|(12&121&(122|123|(124&!125&126)))|4|6|(17&!(171|172))|18)')
})

test('rule-visualization: convert toObj test 1', t => {
  let rule = '1&2'
  let o = convert.toObj(rule)
  let s = convert.toStr(o.rules, o.r_dict, o._dict)
  t.is(s, rule)
})

test('rule-visualization: convert toObj test 2', t => {
  let rule = '((15 & 7) | (21 & 22) | (23 & !24) | (25 & 26) | (27 & 28) | (29 & 30) | !(31 & 32) | (33 & 34)) & 10 & (2 | 11) & (5 | (2 & 19 & 16) | !(11 & 20 & 16) | 35 | 36 | 3 | (12 & 121 & (122 | 123 | (124 & !125 & 126))) | 4 | 6 | (17 & !(171 | 172)) | 18)'
  let o = convert.toObj(rule)
  t.is(convert.toStr(o.rules, o.r_dict, o._dict).replace(/\s+/g, ''), rule.replace(/\s+/g, ''))
})

test('rule-visualization: convert removeUnnecessaryBrackets toObj test 1', t => {
  t.is(convert.removeUnnecessaryBrackets('1&(2&3)'), '1&2&3')
  t.is(convert.removeUnnecessaryBrackets('1&(2|3)'), '1&(2|3)')
  t.is(convert.removeUnnecessaryBrackets('1|(2|3)'), '1|2|3')
  t.is(convert.removeUnnecessaryBrackets('1&(2&3)&(4&5)'), '1&2&3&4&5')
  t.is(convert.removeUnnecessaryBrackets('1&(2&(3&4))'), '1&2&3&4')
  t.is(convert.removeUnnecessaryBrackets('1&(2&((3&31)&4))'), '1&2&3&31&4')

  t.is(convert.removeUnnecessaryBrackets('8&(9|10|(11&12))&13'), '8&(9|10|(11&12))&13')
})

